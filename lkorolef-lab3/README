For my test:
1. Tested if my program could handle multiple clients. So I started my server and had one client connect after another. Since I was having each client send packets every 5 seconds, I could observe the information being passed. Each respective output file was correctly assembled.
2. I tested to see if I could process a large 500Mb file. Although it took quite some time, It could.
3. I tested to see if I could transfer normal text files and it could.
4. I tested to see if I could transfer jpegs and it could.
5. I tested to see if it could transfer pdf files and it could.

My Program Description:
My program is run through two separate processes: myclient and myserver. Myserver will simply start the server on a given port with a defined package drop rate. This drop rate will be inspected throughout the servers lifespan to ensure that it is dropping packets at an appropriate time. The server will constantly be given packets from different clients where it’ll save a “ClientState” or profile for each connecting client. It will then, when it receives a FIN packet from the client, write the contents of each saved buffer from the specified terminating client. 
The client will constantly read in bytes for a max window size, then after sending that window size will wait until it receives either an ACK for the specified packet sequence number or a retransmission request for a specified sequence number. This way, the client knows for sure if a packet has been selectively dropped by the server, or it will timeout after having not received a response. 

Check my program_info file in /doc/Program_info for file descriptions
